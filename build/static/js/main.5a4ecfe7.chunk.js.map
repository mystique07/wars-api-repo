{"version":3,"sources":["components/pages/Home.js","components/pages/Error.js","components/startWars/Nav.js","components/startWars/Planets.js","App.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","Errors","Nav","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","planets","_this2","fetch","then","response","json","setState","results","map","planet","index","id","url","split","key","react_router_dom","activeStyle","fontWeight","to","concat","name","Component","Planet","match","params","planetId","savedPlanet","localStorage","getItem","JSON","parse","setItem","stringify","prevProps","prevState","_this3","Fragment","diameter","rotation_period","orbital_period","climate","App","className","startWars_Nav","react_router","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5a4ecfe7.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Home = () => {\r\n  return <h2>Home page</h2>;\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\n\r\nconst Errors = () => {\r\n  return <h2>Error! Try again.</h2>;\r\n};\r\n\r\nexport default Errors;\r\n","import React, { Component } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nclass Nav extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      planets: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    //Fecth list of vÃ©hicules from SWAPI.co\r\n    fetch(\" https://swapi.co/api/planets/\")\r\n      .then(response => response.json())\r\n      .then(json =>\r\n        this.setState({\r\n          planets: json.results\r\n        })\r\n      );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <ul>\r\n        {this.state.planets.map((planet, index) => {\r\n          // planet.url : https://swapi.co/api/planets/1/\r\n          const id = planet.url.split(\"/\")[5];\r\n          return (\r\n            <li key={index}>\r\n              <NavLink\r\n                activeStyle={{ fontWeight: \"bold\" }}\r\n                to={`/planets/${id}`}\r\n              >\r\n                {planet.name}\r\n              </NavLink>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Nav;\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class Planet extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      planet: {}\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const id = this.props.match.params.planetId;\r\n    const savedPlanet = localStorage.getItem(`planet-${id}`);\r\n\r\n    if (savedPlanet) {\r\n      this.setState({\r\n        planet: JSON.parse(savedPlanet)\r\n      });\r\n      return;\r\n    }\r\n    fetch(`https://swapi.co/api/planets/${id}`)\r\n      .then(response => response.json())\r\n      .then(json => {\r\n        this.setState({\r\n          planet: json\r\n        });\r\n        localStorage.setItem(`planet-${id}`, JSON.stringify(json));\r\n      });\r\n  }\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const prevPropsString = JSON.stringify(prevProps.match.params.planetId);\r\n    const updatePropsString = JSON.stringify(this.props.match.params.planetId);\r\n\r\n    if (prevPropsString !== updatePropsString) {\r\n      //Fetch Planet specific data from API\r\n      const id = this.props.match.params.planetId;\r\n      const savedPlanet = localStorage.getItem(`planet-${id}`);\r\n\r\n      if (savedPlanet) {\r\n        this.setState({\r\n          planet: JSON.parse(savedPlanet)\r\n        });\r\n        return;\r\n      }\r\n      fetch(`https://swapi.co/api/planets/${id}/`)\r\n        .then(response => response.json())\r\n        .then(json => {\r\n          this.setState({\r\n            planet: json\r\n          });\r\n          localStorage.setItem(`planet-${id}`, JSON.stringify(json));\r\n        });\r\n    }\r\n  }\r\n  render() {\r\n    const { planet } = this.state;\r\n    return (\r\n      <>\r\n        <div>\r\n          <h3>Name: {planet.name}</h3>\r\n          <p>Diametre: {planet.diameter}</p>\r\n          <p>Rotation: {planet.rotation_period}</p>\r\n          <p>Orbital_Period: {planet.orbital_period}</p>\r\n          <p>Climat: {planet.climate}</p>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\nimport \"./Default.css\";\n\nimport Home from \"./components/pages/Home\";\nimport Errors from \"./components/pages/Error\";\nimport Nav from \"./components/startWars/Nav\";\nimport Planet from \"./components/startWars/Planets\";\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <div className=\"App\">\n          <h1>Awesome Star-Wars Planets</h1>\n\n          <Router>\n            <ul>\n              <li>\n                <Link to=\"/\">Home</Link>\n              </li>\n            </ul>\n            <hr />\n            <Nav />\n            <hr />\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route path=\"/planets/:planetId\" component={Planet} />\n\n              <Route component={Errors} />\n            </Switch>\n          </Router>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}